@using Jimy.Blazor.API.Interfaces
@inject IWorkoutPlanService WorkoutPlanService
@inject IExerciseService ExerciseService
@inject IAuthService AuthService


<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="edit-modal">
    <div class="relative top-20 mx-auto p-5 border w-1/2 max-w-2xl shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Edit Workout Plan</h3>
            <div class="mt-2 px-7 py-3">
                <input @bind="workoutPlan.Name" class="w-full px-3 py-2 border rounded-md" placeholder="Workout Plan Name"/>

                @foreach (var exercise in workoutPlan.Exercises)
                {
                    <div class="mt-3 flex items-center">
                        <select @onchange="e => UpdateExercise(exercise, e)" class="w-1/2 px-3 py-2 border rounded-md">
                            @foreach (var availableExercise in availableExercises)
                            {
                                <option value="@availableExercise.Id" selected="@(exercise.ExerciseId == availableExercise.Id)">@availableExercise.Name</option>
                            }
                        </select>
                        <input @bind="exercise.Sets" type="number" class="w-1/4 px-3 py-2 border rounded-md ml-2" placeholder="Sets"/>
                        <input @bind="exercise.Reps" type="number" class="w-1/4 px-3 py-2 border rounded-md ml-2" placeholder="Reps"/>
                        <button @onclick="() => DeleteExercise(exercise)" class="ml-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                            Delete
                        </button>
                    </div>
                }

                <button @onclick="AddExercise" class="mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Add Exercise
                </button>
            </div>
            <div class="items-center px-4 py-3">
                <button @onclick="UpdatePlan" class="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-300">
                    Update Plan
                </button>
            </div>
            <div class="items-center px-4 py-3">
                <button @onclick="HandleClose" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-300">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@if (showErrorPopup)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="error-modal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-red-600">Error</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500">@errorMessage</p>
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="CloseErrorPopup" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-300">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public WorkoutPlanDto WorkoutPlan { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnPlanUpdated { get; set; }

    private WorkoutPlanDto workoutPlan;
    private List<ExerciseDto> availableExercises = new();
    private bool showErrorPopup = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        workoutPlan = new WorkoutPlanDto
        {
            Id = WorkoutPlan.Id,
            UserId = WorkoutPlan.UserId,
            Name = WorkoutPlan.Name,
            CreatedDate = WorkoutPlan.CreatedDate,
            Exercises = new List<WorkoutExerciseDto>(WorkoutPlan.Exercises)
        };
        availableExercises = await ExerciseService.GetExercisesAsync();
    }

    private void AddExercise()
    {
        var firstExercise = availableExercises.FirstOrDefault();
        if (firstExercise != null)
        {
            workoutPlan.Exercises.Add(new WorkoutExerciseDto
            {
                WorkoutExerciseId = Guid.NewGuid(),
                ExerciseId = firstExercise.Id,
                ExerciseName = firstExercise.Name,
                Sets = 1,
                Reps = 1
            });
        }
    }

    private void DeleteExercise(WorkoutExerciseDto exercise)
    {
        workoutPlan.Exercises.Remove(exercise);
    }

    private void UpdateExercise(WorkoutExerciseDto exercise, ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out var exerciseId))
        {
            var selectedExercise = availableExercises.FirstOrDefault(x => x.Id == exerciseId);
            if (selectedExercise != null)
            {
                exercise.ExerciseId = selectedExercise.Id;
                exercise.ExerciseName = selectedExercise.Name;
            }
        }
    }

    private async Task UpdatePlan()
    {
        try
        {
            foreach (var exercise in workoutPlan.Exercises)
            {
                if (exercise.WorkoutExerciseId == Guid.Empty)
                {
                    exercise.WorkoutExerciseId = Guid.NewGuid();
                }
            }

            await WorkoutPlanService.UpdateWorkoutPlanAsync(workoutPlan);
            await OnPlanUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating workout plan: {ex.Message}";
            showErrorPopup = true;
        }
    }

    private void CloseErrorPopup()
    {
        showErrorPopup = false;
        errorMessage = "";
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

}