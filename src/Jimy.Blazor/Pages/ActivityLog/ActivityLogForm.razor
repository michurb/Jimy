@page "/activity-logs/create"
@page "/activity-logs/edit/{Id:int}"
@using System.ComponentModel.DataAnnotations
@using Jimy.Blazor.Services
@using Jimy.Business.DTOs
@using Jimy.Data.Repositories
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h1 class="text-2xl font-bold mb-4">@(_isEditing ? "Edit" : "Create") Activity Log</h1>

<EditForm Model="_activityLog" OnValidSubmit="HandleSubmit" class="max-w-md">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-4">
        <label for="activityType" class="block text-gray-700 text-sm font-bold mb-2">Activity Type</label>
        <InputText id="activityType" @bind-Value="_activityLog.ActivityType" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
        <ValidationMessage For="@(() => _activityLog.ActivityType)" />
    </div>

    <div class="mb-4">
        <label for="date" class="block text-gray-700 text-sm font-bold mb-2">Date</label>
        <InputDate id="date" @bind-Value="_activityLog.Date" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
        <ValidationMessage For="@(() => _activityLog.Date)" />
    </div>

    <div class="mb-4">
        <label for="duration" class="block text-gray-700 text-sm font-bold mb-2">Duration (minutes)</label>
        <InputNumber id="duration" @bind-Value="_activityLog.Duration" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
        <ValidationMessage For="@(() => _activityLog.Duration)" />
    </div>

    <div class="mb-4">
        <label for="workoutPlanId" class="block text-gray-700 text-sm font-bold mb-2">Workout Plan (optional)</label>
        <InputSelect id="workoutPlanId" @bind-Value="_activityLog.WorkoutPlanId" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            <option value="">Select a workout plan</option>
            @foreach (var plan in _workoutPlans)
            {
                <option value="@plan.Id">@plan.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
        @(_isEditing ? "Update" : "Create") Activity Log
    </button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }

    private bool _isEditing => Id.HasValue;
    private ActivityLogFormModel _activityLog = new();
    private IEnumerable<WorkoutPlanDto> _workoutPlans = new List<WorkoutPlanDto>();

    protected override async Task OnInitializedAsync()
    {
        // TODO: Replace with actual user ID
        Guid userId = Guid.Empty;
        _workoutPlans = await ApiService.GetWorkoutPlansAsync(userId);

        if (_isEditing)
        {
            var log = await ApiService.GetActivityLogAsync(userId);
            _activityLog.ActivityType = log.ActivityType;
            _activityLog.Date = log.Date;
            _activityLog.Duration = log.Duration;
            _activityLog.WorkoutPlanId = log.WorkoutPlanId;
        }
        else
        {
            _activityLog.Date = DateTime.Today;
        }
    }

    private async Task HandleSubmit()
    {
        if (_isEditing)
        {
            await ApiService.UpdateActivityLogAsync(Id.Value, new UpdateActivityLogDto(
                _activityLog.Date,
                _activityLog.ActivityType,
                _activityLog.Duration,
                _activityLog.WorkoutPlanId
            ));
        }
        else
        {
            // TODO: Replace with actual user ID
            Guid userId = Guid.Empty;
            await ApiService.CreateActivityLogAsync(new CreateActivityLogDto(
                userId,
                _activityLog.Date,
                _activityLog.ActivityType,
                _activityLog.Duration,
                _activityLog.WorkoutPlanId
            ));
        }

        NavigationManager.NavigateTo("/activity-logs");
    }

    public class ActivityLogFormModel
    {
        [Required]
        [StringLength(50, ErrorMessage = "Activity type is too long.")]
        public string ActivityType { get; set; } = string.Empty;

        [Required]
        public DateTime Date { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Duration must be greater than 0.")]
        public int Duration { get; set; }

        public int? WorkoutPlanId { get; set; }
    }
}