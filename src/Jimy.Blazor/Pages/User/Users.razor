@page "/users"
@using Jimy.Blazor.Services
@using Jimy.Business.DTOs
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h1 class="text-2xl font-bold mb-4">Users</h1>

@if (_users == null)
{
    <p>Loading...</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        @foreach (var user in _users)
        {
            <div class="bg-white shadow rounded-lg p-4">
                <h2 class="text-xl font-semibold">@user.Username</h2>
                <p class="text-gray-600">@user.Email</p>
                <p class="text-sm text-gray-500">Joined: @user.DateJoined.ToShortDateString()</p>
                <div class="mt-4">
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"
                            @onclick="() => EditUser(user.Id)">
                        Edit
                    </button>
                    <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
                            @onclick="() => DeleteUser(user.Id)">
                        Delete
                    </button>
                </div>
            </div>
        }
    </div>

    <button class="mt-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
            @onclick="CreateUser">
        Create New User
    </button>
}

@code {
    private IEnumerable<UserDto>? _users;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _users = await ApiService.GetUsersAsync();
    }

    private void EditUser(Guid id)
    {
        NavigationManager.NavigateTo($"/users/edit/{id}");
    }

    private async Task DeleteUser(Guid id)
    {
        await ApiService.DeleteUserAsync(id);
        await LoadUsers();
    }

    private void CreateUser()
    {
        NavigationManager.NavigateTo("/users/create");
    }
}