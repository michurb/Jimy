@page "/active-workout/{sessionId:guid}"
@inject IWorkoutSessionService WorkoutSessionService
@inject NavigationManager NavigationManager
@using Jimy.Blazor.API.Interfaces
@implements IDisposable

<h3 class="text-2xl font-semibold mb-4">Active Workout Session</h3>

@if (IsLoading)
{
    <p class="text-gray-600">Loading workout session details...</p>
}
else if (WorkoutSession != null)
{
    <div class="bg-white shadow-md rounded-lg p-6">
        <p class="text-xl font-semibold mb-4">Time Elapsed: @ElapsedTime.ToString(@"hh\:mm\:ss")</p>

        @foreach (var exercise in WorkoutSession.Exercises)
        {
            <div class="mb-6 border-b pb-4">
                <h4 class="text-lg font-semibold mb-2">@exercise.Name</h4>
                @for (var i = 1; i <= exercise.Sets; i++)
                {
                    var setNumber = i;
                    <div class="flex items-center mb-2">
                        <span class="w-20">Set @setNumber:</span>
                        <input type="number" value="@exercise.Weight" @onchange="e => UpdateWeight(exercise.Id, setNumber, decimal.Parse(e.Value.ToString()))" class="w-20 px-2 py-1 border rounded-md mr-2"/> kg
                        <span class="ml-2">@exercise.Reps reps</span>
                    </div>
                }
            </div>
        }

        <button @onclick="EndWorkout" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
            End Workout
        </button>
    </div>
}

@code {
    [Parameter] public Guid SessionId { get; set; }
    private WorkoutSessionDto WorkoutSession { get; set; }
    private bool IsLoading { get; set; } = true;
    private TimeSpan ElapsedTime => DateTime.UtcNow - WorkoutSession?.StartTime ?? TimeSpan.Zero;
    private System.Threading.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkoutSession();
        _timer = new System.Threading.Timer(_ => { InvokeAsync(StateHasChanged); }, null, 0, 1000);
    }

    private async Task LoadWorkoutSession()
    {
        WorkoutSession = await WorkoutSessionService.GetSessionAsync(SessionId);
        IsLoading = false;
    }

    private async Task UpdateWeight(Guid exerciseId, int setNumber, decimal newWeight)
    {
        await WorkoutSessionService.UpdateExerciseWeight(SessionId, exerciseId, setNumber, newWeight);
        await LoadWorkoutSession();
    }

    private async Task EndWorkout()
    {

        NavigationManager.NavigateTo("/dashboard");
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}