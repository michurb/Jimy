@using Jimy.Blazor.Services.Interfaces
@inject IAdminService AdminService

<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="edit-user-modal">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Edit User</h3>
        <EditForm Model="@editUserDto" OnValidSubmit="UpdateUser">
            <DataAnnotationsValidator />

            <div class="mb-4">
                <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                <InputText id="username" @bind-Value="editUserDto.Username" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm" />
                <ValidationMessage For="@(() => editUserDto.Username)" />
            </div>

            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <InputText id="email" @bind-Value="editUserDto.Email" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm" />
                <ValidationMessage For="@(() => editUserDto.Email)" />
            </div>

            <div class="mb-4">
                <label for="role" class="block text-sm font-medium text-gray-700">Role</label>
                <InputSelect id="role" @bind-Value="editUserDto.Role" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm">
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                </InputSelect>
                <ValidationMessage For="@(() => editUserDto.Role)" />
            </div>

            <div class="flex justify-end">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
                    Update
                </button>
                <button @onclick="OnClose" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public UserDto User { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnUserUpdated { get; set; }

    private EditUserDto editUserDto = new();

    protected override void OnParametersSet()
    {
        editUserDto = new EditUserDto
        {
            Id = User.Id,
            Username = User.Username,
            Email = User.Email,
            Role = User.Role
        };
    }

    private async Task UpdateUser()
    {
        await AdminService.UpdateUserAsync(editUserDto);
        await OnUserUpdated.InvokeAsync();
    }
}