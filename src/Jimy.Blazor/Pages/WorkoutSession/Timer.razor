@using System.Timers

<div class="flex flex-col items-center justify-center">
    <div class="mb-4 text-center">
        <span class="text-4xl font-bold">@DisplayTime</span>
    </div>
    <div class="flex justify-center space-x-4">
        <button
            @onclick="ToggleTimer"
            class="py-2 px-4 font-bold text-white rounded-lg transition-all duration-200 ease-in-out @(
            IsRunning ? "bg-red-500 hover:bg-red-600" : "bg-green-500 hover:bg-green-600")">
            @(IsRunning ? "Stop" : "Start") Timer
        </button>
        <button
            @onclick="Reset"
            class="py-2 px-4 font-bold text-white rounded-lg bg-blue-500 hover:bg-blue-600 transition-all duration-200 ease-in-out">
            Reset
        </button>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> OnTimerToggle { get; set; }
    
    private System.Timers.Timer _timer;
    private TimeSpan _time = TimeSpan.Zero;
    public bool IsRunning { get; private set; }
    public string DisplayTime => _time.ToString(@":mm\:ss");

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += TimerTick;
    }

    private void TimerTick(object sender, ElapsedEventArgs e)
    {
        _time = _time.Add(TimeSpan.FromSeconds(1));
        InvokeAsync(StateHasChanged);
    }

    private async Task ToggleTimer()
    {
        if (IsRunning)
        {
            _timer.Stop();
        }
        else
        {
            _timer.Start();
        }
        IsRunning = !IsRunning;
        await OnTimerToggle.InvokeAsync(IsRunning);
    }

    public void Reset()
    {
        _time = TimeSpan.Zero;
        IsRunning = false;
        _timer.Stop();
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}