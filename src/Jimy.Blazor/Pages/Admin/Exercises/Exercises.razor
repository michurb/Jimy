@page "/admin/exercises"
@using Jimy.Blazor.Services.Interfaces
@using Jimy.Blazor.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "admin")]
@inject IExerciseService ExerciseService
@layout AdminLayout

<h2 class="text-2xl font-semibold mb-4">Exercise Management</h2>

@if (exercises == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-4">
        <button @onclick="OpenCreateExerciseModal" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
            Create Exercise
        </button>
    </div>

    <table class="min-w-full bg-white">
        <thead>
            <tr>
                <th class="py-2 px-4 border-b">ID</th>
                <th class="py-2 px-4 border-b">Name</th>
                <th class="py-2 px-4 border-b">Description</th>
                <th class="py-2 px-4 border-b">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exercise in exercises)
            {
                <tr>
                    <td class="py-2 px-4 border-b">@exercise.Id</td>
                    <td class="py-2 px-4 border-b">@exercise.Name</td>
                    <td class="py-2 px-4 border-b">@exercise.Description</td>
                    <td class="py-2 px-4 border-b content-between">
                        <button @onclick="() => OpenEditExerciseModal(exercise)" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2">
                            Edit
                        </button>
                        <button @onclick="() => OpenDeleteConfirmation(exercise.Id)" class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showCreateExerciseModal)
{
    <CreateExercise OnClose="CloseCreateExerciseModal" OnExerciseCreated="HandleExerciseCreated" />
}

@if (showEditExerciseModal)
{
    <EditExercise Exercise="selectedExercise" OnClose="CloseEditExerciseModal" OnExerciseUpdated="HandleExerciseUpdated" />
}

@if (showDeleteConfirmation)
{
    <ConfirmationModal
        Title="Confirm Delete"
        Message="Are you sure you want to delete this exercise?"
        OnConfirm="ConfirmDeleteExercise"
        OnCancel="CancelDeleteExercise" />
}

@code {
    private IEnumerable<ExerciseDto> exercises;
    private bool showCreateExerciseModal;
    private bool showEditExerciseModal;
    private bool showDeleteConfirmation;
    private ExerciseDto selectedExercise;
    private Guid exerciseIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadExercises();
    }

    private async Task LoadExercises()
    {
        exercises = await ExerciseService.GetExercisesAsync();
    }

    private void OpenCreateExerciseModal()
    {
        showCreateExerciseModal = true;
    }

    private void CloseCreateExerciseModal()
    {
        showCreateExerciseModal = false;
    }

    private async Task HandleExerciseCreated()
    {
        CloseCreateExerciseModal();
        await LoadExercises();
    }

    private void OpenEditExerciseModal(ExerciseDto exercise)
    {
        selectedExercise = exercise;
        showEditExerciseModal = true;
    }

    private void CloseEditExerciseModal()
    {
        showEditExerciseModal = false;
        selectedExercise = null;
    }

    private async Task HandleExerciseUpdated()
    {
        CloseEditExerciseModal();
        await LoadExercises();
    }

    private void OpenDeleteConfirmation(Guid exerciseId)
    {
        exerciseIdToDelete = exerciseId;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteExercise()
    {
        await ExerciseService.DeleteExerciseAsync(exerciseIdToDelete);
        showDeleteConfirmation = false;
        await LoadExercises();
    }

    private void CancelDeleteExercise()
    {
        showDeleteConfirmation = false;
        exerciseIdToDelete = Guid.Empty;
    }
}