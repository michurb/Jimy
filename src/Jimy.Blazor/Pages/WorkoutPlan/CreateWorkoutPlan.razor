@using Jimy.Blazor.API.Interfaces
@using Jimy.Blazor.Models
@inject IWorkoutPlanService WorkoutPlanService
@inject IExerciseService ExerciseService
@inject IAuthService AuthService

<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="my-modal">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Create Workout Plan</h3>
            <div class="mt-2 px-7 py-3">
                <input @bind="workoutPlan.Name" class="w-full px-3 py-2 border rounded-md" placeholder="Workout Plan Name" />

                @foreach (var exercise in workoutPlan.Exercises)
                {
                <div class="mt-3 flex items-center">
                    <select @onchange="(e) => UpdateExercise(exercise, e)" class="w-1/2 px-3 py-2 border rounded-md">
                        @foreach (var availableExercise in availableExercises)
                        {
                        <option value="@availableExercise.Id">@availableExercise.Name</option>
                        }
                    </select>
                    <input @bind="exercise.Sets" type="number" class="w-1/4 px-3 py-2 border rounded-md ml-2" placeholder="Sets" />
                    <input @bind="exercise.Reps" type="number" class="w-1/4 px-3 py-2 border rounded-md ml-2" placeholder="Reps" />
                </div>
                }

                <button @onclick="AddExercise" class="mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Add Exercise
                </button>
            </div>
            <div class="items-center px-4 py-3">
                <button @onclick="CreatePlan" class="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-300">
                    Create Plan
                </button>
            </div>
            <div class="items-center px-4 py-3">
                <button @onclick="HandleClose" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-300">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@if (showMessage)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="message-modal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium @(isError ? "text-red-600" : "text-green-600")">
                    @(isError ? "Error" : "Success")
                </h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500">
                        @message
                    </p>
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="CloseMessage" 
                        class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnPlanCreated { get; set; }

    private CreateWorkoutPlanDto workoutPlan = new CreateWorkoutPlanDto
    {
        Name = "",
        Exercises = new List<WorkoutExerciseDto>()
    };

    private List<ExerciseDto> availableExercises = new List<ExerciseDto>();
    private bool showMessage = false;
    private string message = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        availableExercises = await ExerciseService.GetExercisesAsync();
        if (workoutPlan.Exercises.Count == 0)
        {
            AddExercise();
        }
        var currentUser = await AuthService.GetCurrentUserAsync();
        workoutPlan.UserId = currentUser.Id;
    }

    private void AddExercise()
    {
        var firstExercise = availableExercises.FirstOrDefault();
        workoutPlan.Exercises.Add(new WorkoutExerciseDto
        {
            ExerciseId = firstExercise?.Id ?? Guid.Empty,
            ExerciseName = firstExercise?.Name ?? "",
            Sets = 1,
            Reps = 1
        });
        StateHasChanged();
    }

    private void UpdateExerciseName(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out Guid exerciseId))
        {
            var exercise = availableExercises.FirstOrDefault(x => x.Id == exerciseId);
            if (exercise != null)
            {
                var workoutExercise = workoutPlan.Exercises.FirstOrDefault(x => x.ExerciseId == exerciseId);
                if (workoutExercise != null)
                {
                    workoutExercise.ExerciseName = exercise.Name;
                }
            }
        }
    }

    private async Task CreatePlan()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(workoutPlan.Name))
            {
                ShowMessage("Please enter a workout plan name.", true);
                return;
            }

            if (!workoutPlan.Exercises.Any())
            {
                ShowMessage("Please add at least one exercise to the workout plan.", true);
                return;
            }

            await WorkoutPlanService.CreateWorkoutPlanAsync(workoutPlan);
            ShowMessage("Workout plan created successfully!", false);
            await OnPlanCreated.InvokeAsync();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error creating workout plan: {ex.Message}", true);
        }
    }

    private void ShowMessage(string msg, bool error)
    {
        message = msg;
        isError = error;
        showMessage = true;
        StateHasChanged();
    }

    private void CloseMessage()
    {
        showMessage = false;
        StateHasChanged();
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }
    
    private void UpdateExercise(WorkoutExerciseDto exercise, ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out Guid exerciseId))
        {
            var selectedExercise = availableExercises.FirstOrDefault(x => x.Id == exerciseId);
            if (selectedExercise != null)
            {
                exercise.ExerciseId = selectedExercise.Id;
                exercise.ExerciseName = selectedExercise.Name;
            }
        }
    }
}