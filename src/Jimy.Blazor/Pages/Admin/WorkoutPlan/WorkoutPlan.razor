@page "/admin/workout-plans"
@using Jimy.Blazor.API.Interfaces
@using Jimy.Blazor.Services.Interfaces
@using Jimy.Blazor.Shared
@using Microsoft.AspNetCore.Authorization
@using Jimy.Blazor.Pages.WorkoutPlan
@attribute [Authorize(Roles = "admin")]
@inject IWorkoutPlanService WorkoutPlanService
@layout AdminLayout

<h2 class="text-2xl font-semibold mb-4">Workout Plan Management</h2>

@if (workoutPlans == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-4">
    </div>

    <table class="min-w-full bg-white">
        <thead>
            <tr>
                <th class="py-2 px-4 border-b">ID</th>
                <th class="py-2 px-4 border-b">Name</th>
                <th class="py-2 px-4 border-b">User ID</th>
                <th class="py-2 px-4 border-b">Created Date</th>
                <th class="py-2 px-4 border-b">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in workoutPlans)
            {
                <tr>
                    <td class="py-2 px-4 border-b">@plan.Id</td>
                    <td class="py-2 px-4 border-b">@plan.Name</td>
                    <td class="py-2 px-4 border-b">@plan.UserId</td>
                    <td class="py-2 px-4 border-b">@plan.CreatedDate.ToString("g")</td>
                    <td class="py-2 px-4 border-b">
                        <button @onclick="() => OpenEditWorkoutPlanModal(plan)" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2">
                            Edit
                        </button>
                        <button @onclick="() => OpenDeleteConfirmation(plan.Id)" class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showEditWorkoutPlanModal)
{
    <EditWorkoutPlan WorkoutPlan="selectedWorkoutPlan" OnClose="CloseEditWorkoutPlanModal" OnPlanUpdated="HandleWorkoutPlanUpdated" />
}

@if (showDeleteConfirmation)
{
    <ConfirmationModal
        Title="Confirm Delete"
        Message="Are you sure you want to delete this workout plan?"
        OnConfirm="ConfirmDeleteWorkoutPlan"
        OnCancel="CancelDeleteWorkoutPlan" />
}

@code {
    private IEnumerable<WorkoutPlanDto> workoutPlans;
    private bool showCreateWorkoutPlanModal;
    private bool showEditWorkoutPlanModal;
    private bool showDeleteConfirmation;
    private WorkoutPlanDto selectedWorkoutPlan;
    private Guid workoutPlanToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkoutPlans();
    }

    private async Task LoadWorkoutPlans()
    {
        workoutPlans = await WorkoutPlanService.GetAllWorkoutPlansAsync();
    }

    private void OpenCreateWorkoutPlanModal()
    {
        showCreateWorkoutPlanModal = true;
    }

    private void OpenEditWorkoutPlanModal(WorkoutPlanDto plan)
    {
        selectedWorkoutPlan = plan;
        showEditWorkoutPlanModal = true;
    }

    private void CloseEditWorkoutPlanModal()
    {
        showEditWorkoutPlanModal = false;
        selectedWorkoutPlan = null;
    }

    private async Task HandleWorkoutPlanUpdated()
    {
        CloseEditWorkoutPlanModal();
        await LoadWorkoutPlans();
    }

    private void OpenDeleteConfirmation(Guid workoutPlanId)
    {
        workoutPlanToDeleteId = workoutPlanId;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDeleteWorkoutPlan()
    {
        await WorkoutPlanService.DeleteWorkoutPlanAsync(workoutPlanToDeleteId);
        showDeleteConfirmation = false;
        await LoadWorkoutPlans();
    }

    private void CancelDeleteWorkoutPlan()
    {
        showDeleteConfirmation = false;
        workoutPlanToDeleteId = Guid.Empty;
    }
}