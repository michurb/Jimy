@page "/workout-plans"
@layout UserLayout
@using Blazored.LocalStorage
@using Jimy.Blazor.API.Interfaces
@using Jimy.Blazor.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@inject IWorkoutPlanService WorkoutPlanService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IWorkoutSessionService WorkoutSessionService
@inject ILocalStorageService LocalStorage

<AuthorizeView>
    <Authorized>
        <main>
            <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                @if (isLoading)
                {
                    <p>Loading workout plans...</p>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                        <span class="block sm:inline">@errorMessage</span>
                    </div>
                }
                else if (workoutPlans != null && workoutPlans.Any())
                {
                    <div class="px-4 py-6 sm:px-0">
                        <h2 class="text-2xl font-semibold mb-4">Workout Plans</h2>
                        <button @onclick="OpenCreateWorkoutPlanModal" class="bg-indigo-600 mb-4 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">
                            Create Workout Plan
                        </button>
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            @foreach (var plan in workoutPlans)
                            {
                                <div class="bg-white shadow-md rounded-lg p-4 mb-4">
                                    <h3 class="text-lg font-semibold mb-2 text-center mx-auto">@plan.Name</h3>
                                    <div>
                                        <table class="table-auto w-full text-left">
                                            <thead>
                                                <tr>
                                                    <th class="px-4 py-2 text-base font-semibold">Exercise Name</th>
                                                    <th class="px-4 py-2 text-base font-semibold">Sets</th>
                                                    <th class="px-4 py-2 text-base font-semibold">Reps</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach(var exercise in plan.Exercises)
                                                {
                                                    <tr class="border-t border-gray-300">
                                                        <td class="px-4 py-2">@exercise.ExerciseName</td>
                                                        <td class="px-4 py-2 text-center">@exercise.Sets</td>
                                                        <td class="px-4 py-2 text-center">@exercise.Reps</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="mt-6 flex flex-col items-center">
                                        <div class="w-full max-w-sm">
                                            <div class="flex justify-center mb-2">
                                                <button @onclick="() => OpenEditWorkoutPlanModal(plan)" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded mr-2">
                                                    Edit
                                                </button>
                                                <button @onclick="() => OpenDeleteConfirmationModal(plan.Id)" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                                                    Delete
                                                </button>
                                            </div>
                                            <div class="w-full">
                                                <button @onclick="() => StartWorkout(plan.Id)" class="w-full bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                                                    Start Workout
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <p>No workout plans available.</p>
                    <div>
                        <button @onclick="OpenCreateWorkoutPlanModal" class="bg-indigo-600 mb-4 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">
                            Create Workout Plan
                        </button>
                    </div>
                }
            </div>
        </main>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@if (showStartWorkoutModal)
{
    <ConfirmationModal 
        Title="Start Workout"
        Message="@($"Are you sure you want to start a workout using the plan \"{selectedWorkoutPlan?.Name}\"?")"
        OnConfirm="ConfirmStartWorkout"
        OnCancel="CloseStartWorkoutModal" />
}

@if (showDeleteConfirmationModal)
{
    <ConfirmationModal 
        Title="Delete Workout Plan"
        Message="Are you sure you want to delete this workout plan?"
        OnConfirm="ConfirmDeleteWorkoutPlan"
        OnCancel="CloseDeleteConfirmationModal" />
}

@if (showCreateWorkoutPlanModal)
{
    <CreateWorkoutPlan OnClose="CloseCreateWorkoutPlanModal" OnPlanCreated="HandleWorkoutPlanCreated" />
}

@if (showEditWorkoutPlanModal)
{
    <EditWorkoutPlan WorkoutPlan="selectedWorkoutPlan" OnClose="CloseEditWorkoutPlanModal" OnPlanUpdated="HandleWorkoutPlanUpdated" />
}

@code {
    private bool showStartWorkoutModal = false;
    private bool showDeleteConfirmationModal = false;
    private string errorMessage;
    private bool isLoading = true;
    private List<WorkoutPlanDto> workoutPlans;
    private bool showCreateWorkoutPlanModal = false;
    private bool showEditWorkoutPlanModal = false;
    private WorkoutPlanDto selectedWorkoutPlan;
    private Guid workoutPlanToDeleteId;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadWorkoutPlans();
    }
    
    private async Task LoadWorkoutPlans()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                NavigateToSignIn();
                return;
            }
            workoutPlans = await WorkoutPlanService.GetUserWorkoutPlansAsync();
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "You are not authorized to access this page. Please sign in.";
            NavigateToSignIn();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void StartWorkout(Guid workoutPlanId)
    {
        selectedWorkoutPlan = workoutPlans.FirstOrDefault(wp => wp.Id == workoutPlanId);
        showStartWorkoutModal = true;
    }
    
    private void NavigateToSignIn()
    {
        NavigationManager.NavigateTo("/signin");
    }

    private void OpenDeleteConfirmationModal(Guid workoutPlanId)
    {
        workoutPlanToDeleteId = workoutPlanId;
        showDeleteConfirmationModal = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        showDeleteConfirmationModal = false;
    }

    private async Task ConfirmDeleteWorkoutPlan()
    {
        try
        {
            await WorkoutPlanService.DeleteWorkoutPlanAsync(workoutPlanToDeleteId);
            await LoadWorkoutPlans();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete workout plan: {ex.Message}";
        }
        finally
        {
            CloseDeleteConfirmationModal();
        }
    }

    private void OpenEditWorkoutPlanModal(WorkoutPlanDto plan)
    {
        selectedWorkoutPlan = plan;
        showEditWorkoutPlanModal = true;
    }
    
    private void CloseEditWorkoutPlanModal()
    {
        showEditWorkoutPlanModal = false;
        selectedWorkoutPlan = null;
    }

    private async Task HandleWorkoutPlanUpdated()
    {
        CloseEditWorkoutPlanModal();
        await LoadWorkoutPlans();
    }
    
    private void OpenCreateWorkoutPlanModal()
    {
        showCreateWorkoutPlanModal = true;
    }

    private void CloseCreateWorkoutPlanModal()
    {
        showCreateWorkoutPlanModal = false;
    }

    private async Task HandleWorkoutPlanCreated()
    {
        CloseCreateWorkoutPlanModal();
        await LoadWorkoutPlans();
    }
    
    private void CloseStartWorkoutModal()
    {
        showStartWorkoutModal = false;
        selectedWorkoutPlan = null;
    }

    private async Task ConfirmStartWorkout()
    {
        if (selectedWorkoutPlan != null)
        {
            try
            {
                var sessionId = await WorkoutSessionService.StartWorkoutSession(selectedWorkoutPlan.Id);
                NavigationManager.NavigateTo($"/active-workout/{sessionId}");
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to start workout: {ex.Message}";
            }
        }
        CloseStartWorkoutModal();
    }
}